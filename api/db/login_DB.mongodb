//Base de datos para el proyecto


//üöß‚õ©Ô∏èCreacion de la coleccion producto‚õ©Ô∏èüöß

use("login_DB");
db.createCollection("productos", {
    validator: {
       $jsonSchema: {
          bsonType: "object",
          required: [ "_id","nombre", "precio", "imagen", "altura", "unidades", "descripcion" ],
          title: "productos Validation",
          properties: {
            _id: {
               bsonType: "number",
               description: "'_id' debe ser un n√∫mero",
            },
            nombre: {
               bsonType: "string",
               description: "'nombre' puede contener letras y n√∫meros pero no caracteres especiales",
               pattern: "^[a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$",
               maxLength: 100
            },
            precio: {
               bsonType: "number",
               description: "'precio' debe ser un n√∫mero positivo",
               minimum: 0
            },
            imagen: {
               bsonType: "string",
               description: "'imagen' puede contener letras y n√∫meros pero no caracteres especiales",
               maxLength: 600
            },
            altura: {
               bsonType: "string",
               description: "'altura' debe ser una cadena que representa una unidad de metros cuadrados",
               pattern: "^[0-9]+(\.[0-9]+)?[mM]$",
               maxLength: 20
            },
            unidades: {
               bsonType: "number",
               description: "'unidades' debe ser un n√∫mero positivo",
               minimum: 0
            },
            descripcion: {
               bsonType: "string",
               description: "'descripcion' puede contener letras y n√∫meros pero no caracteres especiales",  
               pattern: "^[a-zA-Z0-9√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ,.\s]+$",
               maxLength: 600
            }
        },
            additionalProperties: false
         }
     },
     validationAction: "error",
     validationLevel: "strict"
});


//üïµÔ∏èConstruccion Validaciones y UsuariosüïµÔ∏è

//üößüë©‚ÄçüíªCreacion de la coleccion Usersüë©‚Äçüíªüöß

use("login_DB");
db.createCollection("usuario_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "nombre",
                "email",
                "password",
                "versiones",
                "codigo_Rol"
            ],
           title: "usuario_Api Validation",
           properties: {
                _id: { 
                    bsonType: "objectId" , 
                    description: "'_id' must be a valid ObjectId"
                },

                nombre: { 
                    bsonType: "string" , 
                    description: "'nombre' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 255
                },

                email: { 
                    bsonType: "string" , 
                    pattern : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
                    description: "'email' must be an email of less than 255 characters",
                    maxLength: 255
                },

                password: { 
                    bsonType: "string" , 
                    description: "'password' must be of type string.",
                    maxLength: 255
                },

                versiones: {
                  bsonType: "array", 
                  description: "'versiones' must be an array",
                  items: {
                      bsonType: "string"
                  }
              },

                codigo_Rol: { 
                    bsonType: "string" , 
                    description: "'codigo_Rol' must be a valid code",
                    pattern: "^(CsWscIpEhqmr1987|CsWscYrYwyvemws22501)$"
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict"
});
//indices para evitar usuarios y correos repetidos.
use("login_DB");
db.usuario_Api.createIndex({ nombre: 1 }, { unique: true });
db.usuario_Api.createIndex({ email: 1 }, { unique: true });

//üößüîéCreacion de la coleccion roles_Apiüîéüöß

use("login_DB");
db.createCollection("roles_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "rol",
                "acceso"
            ],
           title: "roles_Api Validation",
           properties: {
                _id: { 
                    bsonType: "string" , 
                    description: "'_id' must be of type string",
                    pattern: "^(CsWscIpEhqmr1987|CsWscYrYwyvemws22501)$"
                },

                rol: { 
                    bsonType: "string" , 
                    description: "'rol' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 20
                },

                acceso: { 
                    bsonType: "string" , 
                    description: "'acceso' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 200
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});


// el codigo de codigo "CsWscIpEhqmr1987" es una encriptacion con cifrado cesar con desplazamiento 4, la palabra original es "YoSoyElAdmin1987"
// el codigo de codigo "CsWscYrYwyvemws22501" es una encriptacion con cifrado cesar con desplazamiento 4, la palabra original es "YoSoyUnUsuario22501"

//üößüé´Creacion de la coleccion tokens_Apiüé´üöß

use("login_DB");
db.createCollection("tokens_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "id_usuario_Api",
                "token"
            ],
           title: "tokens_Api Validation",
           properties: {
                _id: { 
                    bsonType: "objectId" , 
                    description: "'_id' must be a valid ObjectId"
                },

                id_usuario_Api: { 
                    bsonType: "objectId" , 
                    description: "'id_usuario_Api' must be a valid ObjectId"
                },

                token: { 
                    bsonType: "string" , 
                    description: "'token' must be of type string.",
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});


//ü™ìüîéInyeccion de documentos para la coleccion Roles_Apiüîéü™ì

use("login_DB");
db.roles_Api.insertMany([
    {
      "_id": "CsWscIpEhqmr1987",
      "rol": "Admin",
      "acceso": "Acceso completo a los metodos de crud de todas las colecciones solicitadas por el admin"
    },
    {
      "_id": "CsWscYrYwyvemws22501",
      "rol": "Usuario",
      "acceso": "Acceso a los metodos GET de todas las colecciones solicitadas por el admin"
    }
]);

use("login_DB");
db.usuario_Api.insertMany([
    {
      "nombre": "Juan",
      "email": "juanjoseduranrincon404@gmail.com",
      "password": "Monochrome",
      "versiones" : ["1.0.1", "1.1.0"],
      "codigo_Rol": "CsWscIpEhqmr1987"
    },
    {
      "nombre": "Silver", 
      "email": "prueba1@gmail.com",
      "password": "1234",
      "versiones" : ["1.0.0", "1.1.0"],
      "codigo_Rol": "CsWscYrYwyvemws22501"
    }
]);
  

//üößüßßCreacion de la coleccion passwordCodeüßßüöß
use("login_DB");
db.createCollection("passwordCode", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "name",
                "email",
                "createdAt",
                "recovery_Code"
            ],
           title: "passwordCode Validation",
           properties: {
                _id: { 
                    bsonType: "objectId" , 
                    description: "'_id' must be a valid ObjectId"
                },

                name: { 
                    bsonType: "string" , 
                    description: "'name' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 255
                },

                email: { 
                    bsonType: "string" , 
                    pattern : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
                    description: "'email' must be an email of less than 255 characters",
                    maxLength: 255
                },

                createdAt: {
                    bsonType: "date",
                    description: "'createdAt' must be an Date",
                },

                recovery_Code: { 
                    bsonType: "string" , 
                    description: "'recovery_Code' must be of type string of less than 5 characters",
                    maxLength: 5
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict"
});

use("login_DB");
db.passwordCode.createIndex({ name: 1 }, { unique: true });
db.passwordCode.createIndex({ email: 1 }, { unique: true });
db.passwordCode.createIndex({ createdAt: 1 }, { expireAfterSeconds: 900 })

